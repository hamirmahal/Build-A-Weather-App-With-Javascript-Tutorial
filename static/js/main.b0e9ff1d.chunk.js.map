{"version":3,"sources":["foggy-day-sun.png","Full-Moon-PNG-Transparent-Img.png","the-sun-symbol.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","typeOfWeather","useState","weather","setWeather","extractFromAPI","efLatitude","efLongitude","console","log","coordinate","apiURL","fetch","then","r","json","j","currently","time","daily","data","icon","temperature","summary","useEffect","navigator","geolocation","getCurrentPosition","p","userPosition","coords","latitude","longitude","extractWithProvided","className","style","backgroundColor","color","getStylingFor","src","graySun","alt","sun","moon","href","rel","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2D,gBCA3CD,EAAOC,QAAU,IAA0B,4C,uNCmH5BC,MA7Gf,WAAgB,IAoCOC,EApCR,EACoBC,qBADpB,mBACLC,EADK,KACKC,EADL,KAqBb,SAASC,EAAgBC,EAAaC,GACpCC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZ,IAAMG,EAAU,WAAOJ,EAAP,YAAqBC,GAC/BI,EAAM,UApBA,wCAoBA,OArBH,qCAqBG,OAtBF,qCAsBE,OAAyBD,GACrCE,MAAMD,GAAQE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAQF,MAAK,SAAAG,GACrCR,QAAQC,IAAIO,GACZR,QAAQC,IAAIO,EAAEC,WACdT,QAAQC,IAAIO,EAAEC,UAAUC,MACxBV,QAAQC,IAAIO,EAAEG,OACdX,QAAQC,IAAIO,EAAEG,MAAMC,MACpBZ,QAAQC,IAAIO,EAAEG,MAAMC,KAAK,IANiB,MAOLJ,EAAEC,UAAhCI,EAPmC,EAOnCA,KAPmC,EAO7BC,YAP6B,EAOhBC,QAC1BnB,EAAWiB,MA6Bf,OA7DAb,QAAQC,IAAI,uCAKZe,qBAAU,WAERC,UAAUC,YAAYC,oBAAoB,SAAAC,GAAC,OAG7C,SAA6BC,GAC5B,IAAD,EAAiCA,EAAaC,OAApCC,EAAV,EAAUA,SAASC,EAAnB,EAAmBA,UACjB3B,EAAgB0B,EAAUC,GAJ1BC,CAAoBL,UASpBvB,EAFwB,OACE,YA8C1B,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,aAChBC,MAjBN,SAAuBlC,GACrB,IAAImC,EAAkB,QAClBC,EAAQ,QAUZ,MARuB,sBAAlBpC,GACa,WAAhBA,GAA0C,QAAhBA,IAC1BmC,EAAkB,QAEE,cAAlBnC,IACFmC,EAAkB,OAClBC,EAAQ,SAEH,CAAGD,kBAAkBC,SAKjBC,CAAcnC,IA7BF,uBADJF,EA+BFE,IA7BC,WAAhBF,GAA0C,QAAhBA,EACnB,yBAAKsC,IAAKC,IAASN,UAAU,WAClCO,IAAI,aAEc,cAAlBxC,EACK,yBAAKsC,IAAKG,IAAKR,UAAU,WAC9BO,IAAI,QAED,yBAAKF,IAAKI,IAAMT,UAAU,WAC/BO,IAAI,SAuBF,8FAEuB,uBAAGG,KACxB,8CACAC,IAAI,sBACJC,OAAO,UAHc,QAFvB,KAOA,uBACEZ,UAAU,WACVU,KAAK,sBACLE,OAAO,SACPD,IAAI,uBAJN,kBCvEYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.b0e9ff1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foggy-day-sun.fbb1f177.png\";","module.exports = __webpack_public_path__ + \"static/media/Full-Moon-PNG-Transparent-Img.31501bc8.png\";","module.exports = __webpack_public_path__ + \"static/media/the-sun-symbol.d5784c36.png\";","import React, { useEffect, useState } from 'react';\nimport graySun from './foggy-day-sun.png';\nimport moon from './Full-Moon-PNG-Transparent-Img.png';\nimport sun from './the-sun-symbol.png';\nimport './App.css';\n\nfunction App() {\n  const [ weather , setWeather ] = useState();\n  console.log('Latest build: Monday, July 13, 2020');\n  const key = 'fd9d9c6418c23d94745b836767721ad1/';\n  const ds = 'https://api.darksky.net/forecast/';\n  const proxy = 'https://cors-anywhere.herokuapp.com/';\n  \n  useEffect(() => getAndAnalyzeLatitudeAndLongitude());\n  function getAndAnalyzeLatitudeAndLongitude()\n  { navigator.geolocation.getCurrentPosition( p =>\n    extractWithProvided(p), extractWithDefault()  );  }\n\n  function extractWithProvided(userPosition)\n  { const { latitude,longitude } = userPosition.coords;\n    extractFromAPI( latitude, longitude ); }\n\n  function extractWithDefault()\n  { const defaultLatitude = 37.63;\n    const defaultLongitude = -122.46;\n    extractFromAPI(defaultLatitude, defaultLongitude);}\n\n  function extractFromAPI( efLatitude , efLongitude )\n  { console.log(efLatitude);\n    console.log(efLongitude);\n    const coordinate = `/${efLatitude},${efLongitude}`;\n    const apiURL = `${proxy}${ds}${key}${coordinate}`;\n    fetch(apiURL).then(r => r.json()).then(j => {\n      console.log(j);\n      console.log(j.currently);\n      console.log(j.currently.time);\n      console.log(j.daily);\n      console.log(j.daily.data);\n      console.log(j.daily.data[0]);\n      const {icon, temperature, summary} = j.currently;\n      setWeather(icon);                   } );  }\n\n  function getImageFor(typeOfWeather)\n  { if ( typeOfWeather === 'partly-cloudy-day' ||\n      typeOfWeather==='cloudy'||typeOfWeather==='fog' )\n      return <img src={graySun} className=\"App-logo\"\n        alt=\"gray sun\" />;\n        \n    if (typeOfWeather === 'clear-day')\n      return <img src={sun} className=\"App-logo\"\n        alt=\"sun\" />;\n    \n    return <img src={moon} className=\"App-logo\"\n      alt=\"moon\" />; }\n  \n  function getStylingFor(typeOfWeather)\n  { let backgroundColor = 'black';\n    let color = 'white';\n\n    if ( typeOfWeather === 'partly-cloudy-day' ||\n      typeOfWeather==='cloudy'||typeOfWeather==='fog' )\n      backgroundColor = 'gray';\n        \n    if (typeOfWeather === 'clear-day')\n    { backgroundColor = 'aqua';\n      color = 'black'; }\n    \n    return {  backgroundColor , color }; }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"\n        style={getStylingFor(weather)}>\n        {getImageFor(weather)}\n        {/* <h1 style={temperatureStyle}>74</h1> */}\n        {/* <h1 style={degreeStyle}>Â°</h1> */}\n        <p>\n          View the tutorial Hamir is using to create\n          this web application <a href=\n          'https://www.youtube.com/watch?v=wPElVpR1rwA'\n          rel='noopener noreferrer'\n          target='_blank'>here</a>.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\n// const temperatureStyle = {\n//   alignItems: 'center',\n//   backgroundColor: 'pink',\n//   color: 'black',\n//   display: 'flex',\n//   fontSize: '10vmin',\n//   height: '40vmin',\n//   position: 'absolute',\n// }\n\n// const degreeStyle = {\n//   backgroundColor: 'aqua',\n//   fontSize: '20vmin',\n//   height: '20vmin',\n//   left: '65%',\n//   position: 'absolute',\n//   transform: 'translate(-50%, -50%)'\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
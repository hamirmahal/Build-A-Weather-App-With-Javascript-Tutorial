{"version":3,"sources":["Full-Moon-PNG-Transparent-Img.png","the-sun-symbol.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","itIsDaytime","setTimeOfDay","key","ds","proxy","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","coordinate","api","fetch","then","response","json","rJSON","console","log","currently","time","daily","data","sunriseTime","sunsetTime","className","style","backgroundColor","color","src","sun","alt","moon","href","rel","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,2D,gBCA3CD,EAAOC,QAAU,IAA0B,4C,uMC+E5BC,MA1Ef,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNC,EADM,KACOC,EADP,KAEPC,EAAM,oCACNC,EAAK,oCACLC,EAAQ,uCA0Cd,OAzCAC,qBAA4C,WAC1CC,UAAUC,YAAYC,oBACpB,SAAAC,GAA+C,IAAD,EACdA,EAASC,OAAjCC,EADsC,EACtCA,SAAUC,EAD4B,EAC5BA,UAChBC,MAAMF,GACNE,MAAMD,GACN,IAAME,EAAU,WAAOH,EAAP,YAAmBC,GAC7BG,EAAG,UAAMX,GAAN,OAAcD,GAAd,OAAmBD,GAAnB,OAAyBY,GAClCE,MAAMD,GAAKE,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UACnCF,MAAM,SAAAG,GACLC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMG,WAClBF,QAAQC,IAAIF,EAAMG,UAAUC,MAC5BH,QAAQC,IAAIF,EAAMK,OAClBJ,QAAQC,IAAIF,EAAMK,MAAMC,MACxBL,QAAQC,IAAIF,EAAMK,MAAMC,KAAK,IANf,MAQZN,EAAMK,MAAMC,KAAK,GADXC,EAPM,EAONA,YAAaC,EAPP,EAOOA,WAGhBD,GADYP,EAAMG,UAAfC,MACoBI,GAC1B3B,GAAa,SACrB,WAGEY,MAFe,OAGfA,OAFgB,QAGhB,IAAMC,EAAU,WAJD,MAIC,aAHA,QAIVC,EAAG,UAAMX,GAAN,OAAcD,GAAd,OAAmBD,GAAnB,OAAyBY,GAClCE,MAAMD,GAAKE,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UACnCF,MAAM,SAAAG,GACLC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAMG,WAClBF,QAAQC,IAAIF,EAAMG,UAAUC,MAC5BH,QAAQC,IAAIF,EAAMK,OAClBJ,QAAQC,IAAIF,EAAMK,MAAMC,MACxBL,QAAQC,IAAIF,EAAMK,MAAMC,KAAK,IANP,MAQpBN,EAAMK,MAAMC,KAAK,GADXC,EAPc,EAOdA,YAAaC,EAPC,EAODA,WAGhBD,GADYP,EAAMG,UAAfC,MACoBI,GAC1B3B,GAAa,YAEvB,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,aAAaC,MAAO,CACtCC,gBAAiB/B,EAAc,OAAO,QACtCgC,MAAOhC,GAAe,UAClBA,EAAc,yBAAKiC,IAAKC,IACxBL,UAAU,WAAWM,IAAI,QAAW,yBACpCF,IAAKG,IAAMP,UAAU,WAAWM,IAAI,SACtC,8FAEuB,uBAAGE,KACxB,8CACAC,IAAI,sBACJC,OAAO,UAHc,QAFvB,KAOA,uBACEV,UAAU,WACVQ,KAAK,sBACLE,OAAO,SACPD,IAAI,uBAJN,kBCtDYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.a47b5d58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Full-Moon-PNG-Transparent-Img.31501bc8.png\";","module.exports = __webpack_public_path__ + \"static/media/the-sun-symbol.d5784c36.png\";","import React, { useEffect, useState } from 'react';\nimport moon from './Full-Moon-PNG-Transparent-Img.png';\nimport sun from './the-sun-symbol.png';\nimport './App.css';\n\nfunction App() {\n  const [itIsDaytime, setTimeOfDay] = useState(false);\n  const key = 'fd9d9c6418c23d94745b836767721ad1/';\n  const ds = 'https://api.darksky.net/forecast/';\n  const proxy = 'https://cors-anywhere.herokuapp.com/';\n  useEffect(                                  ()  =>  {\n    navigator.geolocation.getCurrentPosition(\n      position  =>                                  {\n        let { latitude, longitude } = position.coords;\n        alert(latitude);\n        alert(longitude);\n        const coordinate = `/${latitude},${longitude}`;\n        const api = `${proxy}${ds}${key}${coordinate}`;\n        fetch(api).then( response => response.json() )\n          .then( rJSON => {\n            console.log(rJSON);\n            console.log(rJSON.currently);\n            console.log(rJSON.currently.time);\n            console.log(rJSON.daily);\n            console.log(rJSON.daily.data);\n            console.log(rJSON.daily.data[0]);\n            const { sunriseTime, sunsetTime } = \n              rJSON.daily.data[0];\n            const { time } = rJSON.currently;\n            if ( sunriseTime <= time <= sunsetTime)\n              setTimeOfDay(true);              } ); },\n      ()  =>                                   {\n        let latitude = 37.63;\n        let longitude = -122.46;\n        alert(latitude);\n        alert(longitude);\n        const coordinate = `/${latitude},${longitude}`;\n        const api = `${proxy}${ds}${key}${coordinate}`;\n        fetch(api).then( response => response.json() )\n          .then( rJSON =>         {\n            console.log(rJSON);\n            console.log(rJSON.currently);\n            console.log(rJSON.currently.time);\n            console.log(rJSON.daily);\n            console.log(rJSON.daily.data);\n            console.log(rJSON.daily.data[0]);\n            const { sunriseTime, sunsetTime } = \n              rJSON.daily.data[0];\n            const { time } = rJSON.currently;\n            if ( sunriseTime <= time <= sunsetTime)\n              setTimeOfDay(true);});});} )\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{\n      backgroundColor: itIsDaytime ? 'aqua':'black',\n      color: itIsDaytime && 'black'}}>\n        { itIsDaytime ? <img src={sun}\n          className=\"App-logo\" alt=\"sun\" /> : <img\n          src={moon} className=\"App-logo\" alt=\"moon\"/>}\n        <p>\n          View the tutorial Hamir is using to create\n          this web application <a href=\n          'https://www.youtube.com/watch?v=wPElVpR1rwA'\n          rel='noopener noreferrer'\n          target='_blank'>here</a>.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}